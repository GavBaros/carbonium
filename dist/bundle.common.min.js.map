{"version":3,"file":"bundle.common.min.js","sources":["../src/carbonium.ts"],"sourcesContent":["/**!\n @preserve Carbonium 0.1.6\n @copyright 2020 Edwin Martin\n @license MIT\n */\n\nexport function $<T extends HTMLElement = HTMLElement>(\n  selectors: string,\n  parentNode?: Document | ShadowRoot | HTMLElement\n): CarboniumType<T> {\n  const nodelist: NodeListOf<T> = (parentNode || document).querySelectorAll(selectors);\n  return <CarboniumType<T>>(\n    (<unknown>new Proxy<NodeListOf<T>>(nodelist, proxyHandler))\n  );\n}\n\n// Used by classList and style\nlet currentListNodelist: NodeListOf<HTMLElement>;\n\nconst proxyHandler: ProxyHandler<NodeListOf<HTMLElement>> = {\n  get(target, prop) {\n    let propValue = null;\n\n    // Return iterator when asked for iterator\n    if (prop == Symbol.iterator) {\n      return function* () {\n        for (let i = 0; i < target.length; i++) {\n          yield target[i];\n        }\n      };\n    }\n\n    // Special case for style and classList\n    if (prop == \"style\" || prop == \"classList\") {\n      currentListNodelist = target;\n      const propValue = Reflect.get(document.body, prop);\n      return new Proxy(propValue, proxyHandler);\n    }\n\n    let property: string = null;\n\n    // style.setProperty, getPropertyValue…\n    if (target instanceof CSSStyleDeclaration) {\n      propValue = Reflect.get(document.body.style, prop);\n      property = \"style\";\n    }\n\n    // classList.add, contains, remove…\n    if (target instanceof DOMTokenList) {\n      propValue = Reflect.get(document.body.classList, prop);\n      property = \"classList\";\n    }\n\n    // Call style and classList functions\n    if (property) {\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function (target, thisArg, argumentsList) {\n            currentListNodelist.forEach((el) => {\n              Reflect.apply(target, el[property], argumentsList);\n            });\n            return new Proxy(currentListNodelist, proxyHandler);\n          },\n        });\n      } else {\n        return propValue;\n      }\n    }\n\n    // Are we dealing with an Array function?\n    if (Array.prototype.hasOwnProperty(prop)) {\n      const propValue = Reflect.get(Array.prototype, prop);\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function (target, thisArg, argumentsList) {\n            const ret = Reflect.apply(target, thisArg, argumentsList);\n            // forEach returns same array instead of undefined\n            const newTarget = typeof ret != \"undefined\" ? ret : thisArg;\n            return new Proxy(newTarget, proxyHandler);\n          },\n        });\n      }\n    }\n\n    // Get property or call function on DOM elements\n    if (target.length > 0) {\n      // Might be DOM element specific, like input.select(),\n      // so use first array element to get reference\n      if (prop in target[0]) {\n        propValue = Reflect.get(target[0], prop);\n      }\n    } else {\n      // Empty list, targeted DOM element unknown,\n      // use document.body\n      if (prop in document.body) {\n        propValue = Reflect.get(document.body, prop);\n      }\n    }\n\n    // Propagate DOM prop value\n    if (propValue) {\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function (target, thisArg, argumentsList) {\n            let retFirst = null;\n            let first = true;\n            // Apply on individual elements\n            for (const el of thisArg) {\n              const ret = Reflect.apply(target, el, argumentsList);\n              if (first) {\n                retFirst = ret;\n                first = false;\n              }\n            }\n            return retFirst != null && retFirst != undefined\n              ? retFirst\n              : thisArg;\n          },\n        });\n      } else {\n        return propValue;\n      }\n    }\n\n    // Default\n    return Reflect.get(target, prop);\n  },\n\n  // DOM property is set\n  set(target, prop, value) {\n    if (\"forEach\" in target) {\n      target.forEach((el) => {\n        Reflect.set(el, prop, value);\n      });\n    } else {\n      Reflect.set(target, prop, value);\n    }\n    return true;\n  },\n};\n\nexport type CarboniumType<T extends HTMLElement = HTMLElement> = CarboniumList<\n  T\n> &\n  T;\n\ninterface CarboniumList<T extends HTMLElement> extends Array<T> {\n  concat(...items: ConcatArray<T>[]): CarboniumType<T>;\n\n  concat(...items: (T | ConcatArray<T>)[]): CarboniumType<T>;\n\n  reverse(): CarboniumType<T>;\n\n  slice(start?: number, end?: number): CarboniumType<T>;\n\n  splice(start: number, deleteCount?: number): CarboniumType<T>;\n\n  splice(start: number, deleteCount: number, ...items: T[]): CarboniumType<T>;\n\n  forEach(\n    callbackfn: (value: T, index: number, array: T[]) => void,\n    thisArg?: any\n  ): CarboniumType<T>;\n\n  filter(\n    callbackfn: (value: T, index: number, array: T[]) => boolean,\n    thisArg?: any\n  ): CarboniumType<T>;\n\n  setAttribute(qualifiedName: string, value: string): CarboniumType<T>;\n\n  classList: CarboniumClassList<T>;\n  style: CarboniumStyleList<T>;\n}\n\ninterface CarboniumClassList<T extends HTMLElement> extends DOMTokenList {\n  add(...tokens: string[]): CarboniumType<T>;\n\n  remove(...tokens: string[]): CarboniumType<T>;\n\n  replace(oldToken: string, newToken: string): CarboniumType<T>;\n\n  forEach(\n    callbackfn: (value: string, key: number, parent: DOMTokenList) => void,\n    thisArg?: any\n  ): CarboniumType<T>;\n}\n\ninterface CarboniumStyleList<T extends HTMLElement>\n  extends CSSStyleDeclaration {\n  removeProperty(property: string): CarboniumList<T> & string;\n\n  setProperty(\n    property: string,\n    value: string | null,\n    priority?: string\n  ): CarboniumType<T>;\n}\n"],"names":["currentListNodelist","proxyHandler","[object Object]","target","prop","propValue","Symbol","iterator","i","length","Reflect","get","document","body","Proxy","property","CSSStyleDeclaration","style","DOMTokenList","classList","apply","thisArg","argumentsList","forEach","el","Array","prototype","hasOwnProperty","ret","retFirst","first","undefined","set","value","selectors","parentNode","nodelist","querySelectorAll"],"mappings":"aAiBA,IAAIA,yDAEJ,MAAMC,EAAsD,CAC1DC,IAAIC,EAAQC,GACV,IAAIC,EAAY,KAGhB,GAAID,GAAQE,OAAOC,SACjB,OAAO,YACL,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,UAC3BL,EAAOK,IAMnB,GAAY,SAARJ,GAA2B,aAARA,EAAqB,CAC1CJ,EAAsBG,EACtB,MAAME,EAAYK,QAAQC,IAAIC,SAASC,KAAMT,GAC7C,OAAO,IAAIU,MAAMT,EAAWJ,GAG9B,IAAIc,EAAmB,KAevB,GAZIZ,aAAkBa,sBACpBX,EAAYK,QAAQC,IAAIC,SAASC,KAAKI,MAAOb,GAC7CW,EAAW,SAITZ,aAAkBe,eACpBb,EAAYK,QAAQC,IAAIC,SAASC,KAAKM,UAAWf,GACjDW,EAAW,aAITA,EACF,MAAwB,mBAAbV,EACF,IAAIS,MAAgBT,EAAW,CACpCe,MAAO,SAAUjB,EAAQkB,EAASC,GAIhC,OAHAtB,EAAoBuB,QAASC,IAC3Bd,QAAQU,MAAMjB,EAAQqB,EAAGT,GAAWO,KAE/B,IAAIR,MAAMd,EAAqBC,MAInCI,EAKX,GAAIoB,MAAMC,UAAUC,eAAevB,GAAO,CACxC,MAAMC,EAAYK,QAAQC,IAAIc,MAAMC,UAAWtB,GAC/C,GAAwB,mBAAbC,EACT,OAAO,IAAIS,MAAgBT,EAAW,CACpCe,MAAO,SAAUjB,EAAQkB,EAASC,GAChC,MAAMM,EAAMlB,QAAQU,MAAMjB,EAAQkB,EAASC,GAG3C,OAAO,IAAIR,WADqB,IAAPc,EAAqBA,EAAMP,EACxBpB,MAsBpC,OAfIE,EAAOM,OAAS,EAGdL,KAAQD,EAAO,KACjBE,EAAYK,QAAQC,IAAIR,EAAO,GAAIC,IAKjCA,KAAQQ,SAASC,OACnBR,EAAYK,QAAQC,IAAIC,SAASC,KAAMT,IAKvCC,EACsB,mBAAbA,EACF,IAAIS,MAAgBT,EAAW,CACpCe,MAAO,SAAUjB,EAAQkB,EAASC,GAChC,IAAIO,EAAW,KACXC,GAAQ,EAEZ,IAAK,MAAMN,KAAMH,EAAS,CACxB,MAAMO,EAAMlB,QAAQU,MAAMjB,EAAQqB,EAAIF,GAClCQ,IACFD,EAAWD,EACXE,GAAQ,GAGZ,OAAmB,MAAZD,GAAgCE,MAAZF,EACvBA,EACAR,KAIDhB,EAKJK,QAAQC,IAAIR,EAAQC,IAI7B4B,IAAG,CAAC7B,EAAQC,EAAM6B,KACZ,YAAa9B,EACfA,EAAOoB,QAASC,IACdd,QAAQsB,IAAIR,EAAIpB,EAAM6B,KAGxBvB,QAAQsB,IAAI7B,EAAQC,EAAM6B,IAErB;;;;;;SAlITC,EACAC,GAEA,MAAMC,GAA2BD,GAAcvB,UAAUyB,iBAAiBH,GAC1E,OACY,IAAIpB,MAAqBsB,EAAUnC"}