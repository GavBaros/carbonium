{"version":3,"file":"bundle.min.js","sources":["../src/carbonium.ts"],"sourcesContent":["/**!\n @preserve Carbonium 0.1\n @copyright 2020 Edwin Martin\n @license MIT\n */\n\nexport function $(\n  arg: string,\n  doc?: Document | ShadowRoot | HTMLElement\n): CarboniumList {\n  const nodelist: NodeListOf<AllElements> = (doc || document).querySelectorAll(\n    arg\n  );\n  return <CarboniumList>(\n    (<any>new Proxy<NodeListOf<AllElements>>(nodelist, proxyHandler))\n  );\n}\n\n// Used by classList\nlet currentListNodelist: NodeListOf<AllElements>;\n\nconst proxyHandler: ProxyHandler<NodeListOf<AllElements>> = {\n  get(target, prop) {\n    let propValue = null;\n\n    // Return iterator when asked for iterator\n    if (prop == Symbol.iterator) {\n      return function* () {\n        for (let i = 0; i < target.length; i++) {\n          yield target[i];\n        }\n      };\n    }\n\n    // Special case for style and classList\n    if (prop == \"style\" || prop == \"classList\") {\n      currentListNodelist = target;\n      const propValue = Reflect.get(document.body, prop);\n      return new Proxy(propValue, proxyHandler);\n    }\n\n    let property: string = null;\n\n    // style.setProperty, getProperyValue…\n    if (target instanceof CSSStyleDeclaration) {\n      propValue = Reflect.get(document.body.style, prop);\n      property = \"style\";\n    }\n\n    // classList.add, contains, remove…\n    if (target instanceof DOMTokenList) {\n      propValue = Reflect.get(document.body.classList, prop);\n      property = \"classList\";\n    }\n\n    // Call style and classList functions\n    if (property) {\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function (target, thisArg, argumentsList) {\n            currentListNodelist.forEach((el) => {\n              Reflect.apply(target, el[property], argumentsList);\n            });\n            return new Proxy(currentListNodelist, proxyHandler);\n          },\n        });\n      } else {\n        return propValue;\n      }\n    }\n\n    // Are we dealing with an Array function?\n    if (Array.prototype.hasOwnProperty(prop)) {\n      const propValue = Reflect.get(Array.prototype, prop);\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function (target, thisArg, argumentsList) {\n            const ret = Reflect.apply(target, thisArg, argumentsList);\n            // forEach returns same array instead of undefined\n            const newTarget = typeof ret != \"undefined\" ? ret : thisArg;\n            return new Proxy(newTarget, proxyHandler);\n          },\n        });\n      }\n    }\n\n    // Get property or call function on DOM elements\n    if (target.length > 0) {\n      // Might be DOM element specific, like input.select(),\n      // so use first array element to get reference\n      if (prop in target[0]) {\n        propValue = Reflect.get(target[0], prop);\n      }\n    } else {\n      // Empty list, targeted DOM element unknown,\n      // use document.body\n      if (prop in document.body) {\n        propValue = Reflect.get(document.body, prop);\n      }\n    }\n\n    // Propagate DOM prop value\n    if (propValue) {\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function (target, thisArg, argumentsList) {\n            let retFirst = null;\n            let first = true;\n            // Apply on individual elements\n            for (const el of thisArg) {\n              const ret = Reflect.apply(target, el, argumentsList);\n              if (first) {\n                retFirst = ret;\n                first = false;\n              }\n            }\n            return retFirst != null && retFirst != undefined\n              ? retFirst\n              : thisArg;\n          },\n        });\n      } else {\n        return propValue;\n      }\n    }\n\n    // Default\n    return Reflect.get(target, prop);\n  },\n\n  // DOM property is set\n  set(target, prop, value) {\n    if (\"forEach\" in target) {\n      target.forEach((el) => {\n        Reflect.set(el, prop, value);\n      });\n    } else {\n      Reflect.set(target, prop, value);\n    }\n    return true;\n  },\n};\n\n// TODO: set AllElements to union of all possible elements\ntype AllElements = HTMLInputElement & HTMLCanvasElement;\n\nexport type CarboniumType = AllElements & Array<AllElements>;\n\n// TODO: Needs more finetuning\ninterface CarboniumList extends CarboniumType {\n  concat(...items: ConcatArray<AllElements>[]): CarboniumList;\n\n  concat(...items: (AllElements | ConcatArray<AllElements>)[]): CarboniumList;\n\n  reverse(): CarboniumList;\n\n  slice(start?: number, end?: number): CarboniumList;\n\n  splice(start: number, deleteCount?: number): CarboniumList;\n\n  splice(\n    start: number,\n    deleteCount: number,\n    ...items: AllElements[]\n  ): CarboniumList;\n\n  forEach(\n    callbackfn: (\n      value: AllElements,\n      index: number,\n      array: AllElements[]\n    ) => void,\n    thisArg?: any\n  ): CarboniumList;\n\n  filter(\n    callbackfn: (\n      value: AllElements,\n      index: number,\n      array: AllElements[]\n    ) => boolean,\n    thisArg?: any\n  ): CarboniumList;\n\n  setAttribute(qualifiedName: string, value: string): CarboniumList;\n\n  classList: CarboniumClassList;\n  style: CarboniumStyleList;\n}\n\ninterface CarboniumClassList extends DOMTokenList {\n  add(...tokens: string[]): CarboniumList;\n\n  remove(...tokens: string[]): CarboniumList;\n\n  replace(oldToken: string, newToken: string): CarboniumList;\n\n  forEach(\n    callbackfn: (value: string, key: number, parent: DOMTokenList) => void,\n    thisArg?: any\n  ): CarboniumList;\n}\n\ninterface CarboniumStyleList extends CSSStyleDeclaration {\n  removeProperty(property: string): CarboniumList & string;\n\n  setProperty(\n    property: string,\n    value: string | null,\n    priority?: string\n  ): CarboniumList;\n}\n"],"names":["$","arg","doc","nodelist","document","querySelectorAll","Proxy","proxyHandler","currentListNodelist","[object Object]","target","prop","propValue","Symbol","iterator","i","length","Reflect","get","body","property","CSSStyleDeclaration","style","DOMTokenList","classList","apply","thisArg","argumentsList","forEach","el","Array","prototype","hasOwnProperty","ret","retFirst","first","undefined","set","value"],"mappings":";;;;;SAMgBA,EACdC,EACAC,GAEA,MAAMC,GAAqCD,GAAOE,UAAUC,iBAC1DJ,GAEF,OACQ,IAAIK,MAA+BH,EAAUI,GAKvD,IAAIC,EAEJ,MAAMD,EAAsD,CAC1DE,IAAIC,EAAQC,GACV,IAAIC,EAAY,KAGhB,GAAID,GAAQE,OAAOC,SACjB,OAAO,YACL,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,UAC3BL,EAAOK,IAMnB,GAAY,SAARJ,GAA2B,aAARA,EAAqB,CAC1CH,EAAsBE,EACtB,MAAME,EAAYK,QAAQC,IAAId,SAASe,KAAMR,GAC7C,OAAO,IAAIL,MAAMM,EAAWL,GAG9B,IAAIa,EAAmB,KAevB,GAZIV,aAAkBW,sBACpBT,EAAYK,QAAQC,IAAId,SAASe,KAAKG,MAAOX,GAC7CS,EAAW,SAITV,aAAkBa,eACpBX,EAAYK,QAAQC,IAAId,SAASe,KAAKK,UAAWb,GACjDS,EAAW,aAITA,EACF,MAAwB,mBAAbR,EACF,IAAIN,MAAgBM,EAAW,CACpCa,MAAO,SAAUf,EAAQgB,EAASC,GAIhC,OAHAnB,EAAoBoB,QAASC,IAC3BZ,QAAQQ,MAAMf,EAAQmB,EAAGT,GAAWO,KAE/B,IAAIrB,MAAME,EAAqBD,MAInCK,EAKX,GAAIkB,MAAMC,UAAUC,eAAerB,GAAO,CACxC,MAAMC,EAAYK,QAAQC,IAAIY,MAAMC,UAAWpB,GAC/C,GAAwB,mBAAbC,EACT,OAAO,IAAIN,MAAgBM,EAAW,CACpCa,MAAO,SAAUf,EAAQgB,EAASC,GAChC,MAAMM,EAAMhB,QAAQQ,MAAMf,EAAQgB,EAASC,GAG3C,OAAO,IAAIrB,WADqB,IAAP2B,EAAqBA,EAAMP,EACxBnB,MAsBpC,OAfIG,EAAOM,OAAS,EAGdL,KAAQD,EAAO,KACjBE,EAAYK,QAAQC,IAAIR,EAAO,GAAIC,IAKjCA,KAAQP,SAASe,OACnBP,EAAYK,QAAQC,IAAId,SAASe,KAAMR,IAKvCC,EACsB,mBAAbA,EACF,IAAIN,MAAgBM,EAAW,CACpCa,MAAO,SAAUf,EAAQgB,EAASC,GAChC,IAAIO,EAAW,KACXC,GAAQ,EAEZ,IAAK,MAAMN,KAAMH,EAAS,CACxB,MAAMO,EAAMhB,QAAQQ,MAAMf,EAAQmB,EAAIF,GAClCQ,IACFD,EAAWD,EACXE,GAAQ,GAGZ,OAAmB,MAAZD,GAAgCE,MAAZF,EACvBA,EACAR,KAIDd,EAKJK,QAAQC,IAAIR,EAAQC,IAI7B0B,IAAG,CAAC3B,EAAQC,EAAM2B,KACZ,YAAa5B,EACfA,EAAOkB,QAASC,IACdZ,QAAQoB,IAAIR,EAAIlB,EAAM2B,KAGxBrB,QAAQoB,IAAI3B,EAAQC,EAAM2B,IAErB"}