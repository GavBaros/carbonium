{"version":3,"file":"bundle.min.js","sources":["../src/carbonium.ts"],"sourcesContent":["/**\n Carbonium __buildVersion__\n @copyright 2020 Edwin Martin\n @license MIT\n */\n\nexport function $<T extends HTMLElement = HTMLElement>(\n  selectors: string,\n  parentNode?: Document | ShadowRoot | HTMLElement\n): CarboniumType<T> {\n  let nodelist: NodeListOf<T>;\n\n  if (selectors[0] == \"<\") {\n    nodelist = <NodeListOf<T>>(\n      (<unknown>[\n        new DOMParser().parseFromString(selectors, \"text/html\").body.firstChild\n      ])\n    );\n  } else {\n    nodelist = (parentNode || document).querySelectorAll(selectors);\n  }\n  return <CarboniumType<T>>(\n    (<unknown>new Proxy<NodeListOf<T>>(nodelist, proxyHandler))\n  );\n}\n\n// Used by classList and style\nlet currentListNodelist: NodeListOf<HTMLElement>;\nlet propList: string;\n\nconst proxyHandler: ProxyHandler<NodeListOf<HTMLElement>> = {\n  get(target, prop) {\n    let propValue = null;\n\n    // Return iterator when asked for iterator\n    if (prop == Symbol.iterator) {\n      return function* () {\n        for (let i = 0; i < target.length; i++) {\n          yield target[i];\n        }\n      };\n    }\n\n    // Special case for style, classList and relList\n    if (prop == \"style\" || prop == \"classList\" || prop == \"relList\") {\n      currentListNodelist = target;\n      propList = prop;\n      const propValue = Reflect.get(document.body, prop);\n      return new Proxy(propValue, proxyHandler);\n    }\n\n    // style.setProperty, getPropertyValue…, classList.add, contains, remove…, relList…\n    if (\n      target instanceof CSSStyleDeclaration ||\n      target instanceof DOMTokenList\n    ) {\n      propValue = Reflect.get(document.body[propList], prop);\n\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function(target, thisArg, argumentsList) {\n            currentListNodelist.forEach((el) => {\n              Reflect.apply(target, el[propList], argumentsList);\n            });\n            return new Proxy(currentListNodelist, proxyHandler);\n          }\n        });\n      } else {\n        return propValue;\n      }\n    }\n\n    // Are we dealing with an Array function?\n    if (Array.prototype.hasOwnProperty(prop)) {\n      const propValue = Reflect.get(Array.prototype, prop);\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function(target, thisArg, argumentsList) {\n            const ret = Reflect.apply(target, thisArg, argumentsList);\n            // forEach returns same array instead of undefined\n            const newTarget = typeof ret != \"undefined\" ? ret : thisArg;\n            return new Proxy(newTarget, proxyHandler);\n          }\n        });\n      }\n    }\n\n    // Get property or call function on DOM elements\n    if (target.length > 0) {\n      // Might be DOM element specific, like input.select(),\n      // so use first array element to get reference\n      if (prop in target[0]) {\n        propValue = Reflect.get(target[0], prop);\n      }\n    } else {\n      // Empty list, targeted DOM element unknown,\n      // use document.body\n      if (prop in document.body) {\n        propValue = Reflect.get(document.body, prop);\n      }\n    }\n\n    // Propagate DOM prop value\n    if (propValue) {\n      if (typeof propValue == \"function\") {\n        return new Proxy<Function>(propValue, {\n          apply: function(target, thisArg, argumentsList) {\n            let retFirst = null;\n            let first = true;\n            // Apply on individual elements\n            for (const el of thisArg) {\n              const ret = Reflect.apply(target, el, argumentsList);\n              if (first) {\n                retFirst = ret;\n                first = false;\n              }\n            }\n            return retFirst != null && retFirst != undefined\n              ? retFirst\n              : thisArg;\n          }\n        });\n      } else {\n        return propValue;\n      }\n    }\n\n    // Default\n    return Reflect.get(target, prop);\n  },\n\n  // DOM property is set\n  set(target, prop, value) {\n    if (\"forEach\" in target && !(target instanceof CSSStyleDeclaration)) {\n      target.forEach((el) => {\n        Reflect.set(el, prop, value);\n      });\n    } else {\n      Reflect.set(target, prop, value);\n    }\n    return true;\n  }\n};\n\nexport type CarboniumType<T extends HTMLElement = HTMLElement> = CarboniumList<T> &\n  T;\n\ninterface CarboniumList<T extends HTMLElement> extends Array<T> {\n  concat(...items: ConcatArray<T>[]): CarboniumType<T>;\n\n  concat(...items: (T | ConcatArray<T>)[]): CarboniumType<T>;\n\n  reverse(): CarboniumType<T>;\n\n  slice(start?: number, end?: number): CarboniumType<T>;\n\n  splice(start: number, deleteCount?: number): CarboniumType<T>;\n\n  /* tslint:disable:unified-signatures */\n  splice(start: number, deleteCount: number, ...items: T[]): CarboniumType<T>;\n\n  forEach(\n    callbackfn: (value: T, index: number, array: T[]) => void,\n    thisArg?: any\n  ): CarboniumType<T>;\n\n  filter(\n    callbackfn: (value: T, index: number, array: T[]) => boolean,\n    thisArg?: any\n  ): CarboniumType<T>;\n\n  setAttribute(qualifiedName: string, value: string): CarboniumType<T>;\n\n  classList: CarboniumClassList<T>;\n  style: CarboniumStyleList<T>;\n}\n\ninterface CarboniumClassList<T extends HTMLElement> extends DOMTokenList {\n  add(...tokens: string[]): CarboniumType<T>;\n\n  remove(...tokens: string[]): CarboniumType<T>;\n\n  replace(oldToken: string, newToken: string): CarboniumType<T>;\n\n  forEach(\n    callbackfn: (value: string, key: number, parent: DOMTokenList) => void,\n    thisArg?: any\n  ): CarboniumType<T>;\n}\n\ninterface CarboniumStyleList<T extends HTMLElement>\n  extends CSSStyleDeclaration {\n  removeProperty(property: string): CarboniumList<T> & string;\n\n  setProperty(\n    property: string,\n    value: string | null,\n    priority?: string\n  ): CarboniumType<T>;\n}\n"],"names":["$","selectors","parentNode","nodelist","DOMParser","parseFromString","body","firstChild","document","querySelectorAll","Proxy","proxyHandler","currentListNodelist","propList","[object Object]","target","prop","propValue","Symbol","iterator","i","length","Reflect","get","CSSStyleDeclaration","DOMTokenList","apply","thisArg","argumentsList","forEach","el","Array","prototype","hasOwnProperty","ret","retFirst","first","undefined","set","value"],"mappings":";;;;;SAMgBA,EACdC,EACAC,GAEA,IAAIC,EAWJ,OAREA,EADkB,KAAhBF,EAAU,GAEA,EACR,IAAIG,WAAYC,gBAAgBJ,EAAW,aAAaK,KAAKC,aAIrDL,GAAcM,UAAUC,iBAAiBR,GAG3C,IAAIS,MAAqBP,EAAUQ,GAKjD,IAAIC,EACAC,EAEJ,MAAMF,EAAsD,CAC1DG,IAAIC,EAAQC,GACV,IAAIC,EAAY,KAGhB,GAAID,GAAQE,OAAOC,SACjB,OAAO,YACL,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,UAC3BL,EAAOK,IAMnB,GAAY,SAARJ,GAA2B,aAARA,GAA+B,WAARA,EAAmB,CAC/DJ,EAAsBG,EACtBF,EAAWG,EACX,MAAMC,EAAYK,QAAQC,IAAIf,SAASF,KAAMU,GAC7C,OAAO,IAAIN,MAAMO,EAAWN,GAI9B,GACEI,aAAkBS,qBAClBT,aAAkBU,aAIlB,OAFAR,EAAYK,QAAQC,IAAIf,SAASF,KAAKO,GAAWG,GAEzB,mBAAbC,EACF,IAAIP,MAAgBO,EAAW,CACpCS,MAAO,SAASX,EAAQY,EAASC,GAI/B,OAHAhB,EAAoBiB,QAASC,IAC3BR,QAAQI,MAAMX,EAAQe,EAAGjB,GAAWe,KAE/B,IAAIlB,MAAME,EAAqBD,MAInCM,EAKX,GAAIc,MAAMC,UAAUC,eAAejB,GAAO,CACxC,MAAMC,EAAYK,QAAQC,IAAIQ,MAAMC,UAAWhB,GAC/C,GAAwB,mBAAbC,EACT,OAAO,IAAIP,MAAgBO,EAAW,CACpCS,MAAO,SAASX,EAAQY,EAASC,GAC/B,MAAMM,EAAMZ,QAAQI,MAAMX,EAAQY,EAASC,GAG3C,OAAO,IAAIlB,WADqB,IAAPwB,EAAqBA,EAAMP,EACxBhB,MAsBpC,OAfII,EAAOM,OAAS,EAGdL,KAAQD,EAAO,KACjBE,EAAYK,QAAQC,IAAIR,EAAO,GAAIC,IAKjCA,KAAQR,SAASF,OACnBW,EAAYK,QAAQC,IAAIf,SAASF,KAAMU,IAKvCC,EACsB,mBAAbA,EACF,IAAIP,MAAgBO,EAAW,CACpCS,MAAO,SAASX,EAAQY,EAASC,GAC/B,IAAIO,EAAW,KACXC,GAAQ,EAEZ,IAAK,MAAMN,KAAMH,EAAS,CACxB,MAAMO,EAAMZ,QAAQI,MAAMX,EAAQe,EAAIF,GAClCQ,IACFD,EAAWD,EACXE,GAAQ,GAGZ,OAAmB,MAAZD,GAAgCE,MAAZF,EACvBA,EACAR,KAIDV,EAKJK,QAAQC,IAAIR,EAAQC,IAI7BsB,IAAG,CAACvB,EAAQC,EAAMuB,OACZ,YAAaxB,IAAYA,aAAkBS,oBAK7CF,QAAQgB,IAAIvB,EAAQC,EAAMuB,GAJ1BxB,EAAOc,QAASC,IACdR,QAAQgB,IAAIR,EAAId,EAAMuB,MAKnB"}